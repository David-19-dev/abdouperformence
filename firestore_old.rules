rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Règles pour les utilisateurs - accès à son propre profil
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read, list: if isAdmin();
      allow write: if isAdmin();
    }
    
    // Règles pour les réservations
    match /bookings/{bookingId} {
      allow create: if true;
      allow read, update, delete: if request.auth != null;
      allow list: if isAdmin();
      allow write: if isAdmin();
    }
    
    // Règles pour les produits
    match /products/{productId} {
      allow read: if true;
      allow write: if request.auth != null;
      allow list: if isAdmin();
    }
    
    // Règles pour les articles de blog
    match /blog_posts/{postId} {
      allow read: if true;
      allow write: if request.auth != null;
      allow list: if isAdmin();
    }
    
    // Règles pour les vidéos
    match /videos/{videoId} {
      allow read: if true;
      allow write: if request.auth != null;
      allow list: if isAdmin();
    }
    
    // Règles pour les commandes
    match /orders/{orderId} {
      allow read, write: if request.auth != null;
      allow list: if isAdmin();
    }
    
    // Règles pour les tests de configuration Firebase
    match /test/{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}